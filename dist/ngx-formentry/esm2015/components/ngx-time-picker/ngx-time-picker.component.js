import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Component, forwardRef } from '@angular/core';
import * as moment_ from 'moment';
const moment = moment_;
export class NgxTimePickerComponent {
    constructor() {
        this.value = moment().format('HH:mm:ss');
        this.onChange = () => { };
        this.onTouched = () => { };
    }
    ngOnInit() { }
    writeValue(value) {
        this.value = this.formatTimeValue(value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) { }
    onTimeSelect($event) {
        const timeValue = this.formatTimeValue($event);
        this.value = timeValue;
        this.onChange(timeValue);
    }
    formatTimeValue(timeInputString) {
        /*
          Allows processing of data that comes in as date-time
          or just time i.e '1970-03-01 12:32:21' or '12:32:21'
          or '12:32' or '1970-01-01T13:03:00.000+0300'
        */
        let timeArray = [];
        let dateArray = [];
        let timeValue = '';
        if (typeof timeInputString === 'undefined' || timeInputString === null) {
        }
        else {
            timeArray = timeInputString.split(':');
            dateArray = timeInputString.split('-');
        }
        if (timeArray.length === 1 && moment(timeInputString).isValid()) {
            timeValue = moment(timeInputString).format('HH:mm:ss');
        }
        else if (timeArray.length > 1 && timeArray.length < 2) {
            timeValue = moment(timeInputString, moment.defaultFormat).format('HH:mm:ss');
        }
        else if (timeArray.length >= 2 && dateArray.length > 1) {
            timeValue = moment(timeInputString, moment.defaultFormat).format('HH:mm:ss');
        }
        else if (timeArray.length >= 2 && dateArray.length <= 1) {
            timeValue = moment(timeInputString, 'HH:mm:ss').format('HH:mm:ss');
        }
        else {
            timeValue = moment().format('HH:mm:ss');
        }
        return timeValue;
    }
}
NgxTimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-time-picker',
                template: `<input
  type="time"
  class="form-control"
  [ngModel]="value"
  (ngModelChange)="onTimeSelect($event)"
/>
`,
                styles: [``],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        multi: true,
                        useExisting: forwardRef(() => NgxTimePickerComponent)
                    }
                ]
            },] },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRpbWUtcGlja2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1vcGVubXJzLWZvcm1lbnRyeS8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvbmd4LXRpbWUtcGlja2VyL25neC10aW1lLXBpY2tlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxTQUFTLEVBQVUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sS0FBSyxPQUFPLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQztBQW9CdkIsTUFBTTtJQWxCTjtRQW1CUyxVQUFLLEdBQVcsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVDLGFBQVEsR0FBUSxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7UUFDekIsY0FBUyxHQUFRLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztJQW9EbkMsQ0FBQztJQWxEUSxRQUFRLEtBQUksQ0FBQztJQUViLFVBQVUsQ0FBQyxLQUFVO1FBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsRUFBTztRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRU0saUJBQWlCLENBQUMsRUFBTyxJQUFTLENBQUM7SUFFbkMsWUFBWSxDQUFDLE1BQWM7UUFDaEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTSxlQUFlLENBQUMsZUFBdUI7UUFDNUM7Ozs7VUFJRTtRQUNGLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBRW5CLEVBQUUsQ0FBQyxDQUFDLE9BQU8sZUFBZSxLQUFLLFdBQVcsSUFBSSxlQUFlLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN6RSxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixTQUFTLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2QyxTQUFTLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QyxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoRSxTQUFTLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4RCxTQUFTLEdBQUcsTUFBTSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxDQUM5RCxVQUFVLENBQ1gsQ0FBQztRQUNKLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pELFNBQVMsR0FBRyxNQUFNLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQzlELFVBQVUsQ0FDWCxDQUFDO1FBQ0osQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUQsU0FBUyxHQUFHLE1BQU0sQ0FBQyxlQUFlLEVBQUUsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLFNBQVMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUNELE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7O1lBeEVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUU7Ozs7OztDQU1YO2dCQUNDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDWixTQUFTLEVBQUU7b0JBQ1Q7d0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjt3QkFDMUIsS0FBSyxFQUFFLElBQUk7d0JBQ1gsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztxQkFDdEQ7aUJBQ0Y7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBmb3J3YXJkUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBtb21lbnRfIGZyb20gJ21vbWVudCc7XG5jb25zdCBtb21lbnQgPSBtb21lbnRfO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtdGltZS1waWNrZXInLFxuICB0ZW1wbGF0ZTogYDxpbnB1dFxuICB0eXBlPVwidGltZVwiXG4gIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgW25nTW9kZWxdPVwidmFsdWVcIlxuICAobmdNb2RlbENoYW5nZSk9XCJvblRpbWVTZWxlY3QoJGV2ZW50KVwiXG4vPlxuYCxcbiAgc3R5bGVzOiBbYGBdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTmd4VGltZVBpY2tlckNvbXBvbmVudClcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTmd4VGltZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICBwdWJsaWMgdmFsdWU6IHN0cmluZyA9IG1vbWVudCgpLmZvcm1hdCgnSEg6bW06c3MnKTtcbiAgcHVibGljIG9uQ2hhbmdlOiBhbnkgPSAoKSA9PiB7fTtcbiAgcHVibGljIG9uVG91Y2hlZDogYW55ID0gKCkgPT4ge307XG5cbiAgcHVibGljIG5nT25Jbml0KCkge31cblxuICBwdWJsaWMgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuZm9ybWF0VGltZVZhbHVlKHZhbHVlKTtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge31cblxuICBwdWJsaWMgb25UaW1lU2VsZWN0KCRldmVudDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgdGltZVZhbHVlID0gdGhpcy5mb3JtYXRUaW1lVmFsdWUoJGV2ZW50KTtcbiAgICB0aGlzLnZhbHVlID0gdGltZVZhbHVlO1xuICAgIHRoaXMub25DaGFuZ2UodGltZVZhbHVlKTtcbiAgfVxuXG4gIHB1YmxpYyBmb3JtYXRUaW1lVmFsdWUodGltZUlucHV0U3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIC8qXG4gICAgICBBbGxvd3MgcHJvY2Vzc2luZyBvZiBkYXRhIHRoYXQgY29tZXMgaW4gYXMgZGF0ZS10aW1lXG4gICAgICBvciBqdXN0IHRpbWUgaS5lICcxOTcwLTAzLTAxIDEyOjMyOjIxJyBvciAnMTI6MzI6MjEnXG4gICAgICBvciAnMTI6MzInIG9yICcxOTcwLTAxLTAxVDEzOjAzOjAwLjAwMCswMzAwJ1xuICAgICovXG4gICAgbGV0IHRpbWVBcnJheSA9IFtdO1xuICAgIGxldCBkYXRlQXJyYXkgPSBbXTtcbiAgICBsZXQgdGltZVZhbHVlID0gJyc7XG5cbiAgICBpZiAodHlwZW9mIHRpbWVJbnB1dFN0cmluZyA9PT0gJ3VuZGVmaW5lZCcgfHwgdGltZUlucHV0U3RyaW5nID09PSBudWxsKSB7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWVBcnJheSA9IHRpbWVJbnB1dFN0cmluZy5zcGxpdCgnOicpO1xuICAgICAgZGF0ZUFycmF5ID0gdGltZUlucHV0U3RyaW5nLnNwbGl0KCctJyk7XG4gICAgfVxuICAgIGlmICh0aW1lQXJyYXkubGVuZ3RoID09PSAxICYmIG1vbWVudCh0aW1lSW5wdXRTdHJpbmcpLmlzVmFsaWQoKSkge1xuICAgICAgdGltZVZhbHVlID0gbW9tZW50KHRpbWVJbnB1dFN0cmluZykuZm9ybWF0KCdISDptbTpzcycpO1xuICAgIH0gZWxzZSBpZiAodGltZUFycmF5Lmxlbmd0aCA+IDEgJiYgdGltZUFycmF5Lmxlbmd0aCA8IDIpIHtcbiAgICAgIHRpbWVWYWx1ZSA9IG1vbWVudCh0aW1lSW5wdXRTdHJpbmcsIG1vbWVudC5kZWZhdWx0Rm9ybWF0KS5mb3JtYXQoXG4gICAgICAgICdISDptbTpzcydcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh0aW1lQXJyYXkubGVuZ3RoID49IDIgJiYgZGF0ZUFycmF5Lmxlbmd0aCA+IDEpIHtcbiAgICAgIHRpbWVWYWx1ZSA9IG1vbWVudCh0aW1lSW5wdXRTdHJpbmcsIG1vbWVudC5kZWZhdWx0Rm9ybWF0KS5mb3JtYXQoXG4gICAgICAgICdISDptbTpzcydcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh0aW1lQXJyYXkubGVuZ3RoID49IDIgJiYgZGF0ZUFycmF5Lmxlbmd0aCA8PSAxKSB7XG4gICAgICB0aW1lVmFsdWUgPSBtb21lbnQodGltZUlucHV0U3RyaW5nLCAnSEg6bW06c3MnKS5mb3JtYXQoJ0hIOm1tOnNzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWVWYWx1ZSA9IG1vbWVudCgpLmZvcm1hdCgnSEg6bW06c3MnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRpbWVWYWx1ZTtcbiAgfVxufVxuIl19
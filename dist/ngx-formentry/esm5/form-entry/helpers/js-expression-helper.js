import * as _ from 'lodash';
var JsExpressionHelper = /** @class */ (function () {
    function JsExpressionHelper() {
    }
    JsExpressionHelper.prototype.calcBMI = function (height, weight) {
        var r;
        if (height && weight) {
            r = (weight / (((height / 100) * height) / 100)).toFixed(1);
        }
        return height && weight ? parseFloat(r) : null;
    };
    JsExpressionHelper.prototype.calcBSA = function (height, weight) {
        var result;
        if (height && weight) {
            result = Math.sqrt((height * weight) / 3600).toFixed(2);
        }
        return height && weight ? parseFloat(result) : null;
    };
    JsExpressionHelper.prototype.calcBMIForAgeZscore = function (bmiForAgeRef, height, weight) {
        var bmi;
        var maxAgeInDays = 1856;
        if (height && weight) {
            bmi = (weight / (((height / 100) * height) / 100)).toFixed(1);
        }
        var refSectionObject = _.first(bmiForAgeRef);
        var formattedSDValue;
        if (refSectionObject) {
            var refObjectValues = Object.keys(refSectionObject)
                .map(function (key) { return refSectionObject[key]; })
                .map(function (x) { return x; });
            var refObjectKeys = Object.keys(refSectionObject);
            var minimumValue = refObjectValues[1];
            var minReferencePoint_1 = [];
            if (bmi < minimumValue) {
                minReferencePoint_1.push(minimumValue);
            }
            else {
                _.forEach(refObjectValues, function (value) {
                    if (value <= bmi) {
                        minReferencePoint_1.push(value);
                    }
                });
            }
            var lastReferenceValue_1 = _.last(minReferencePoint_1);
            var lastValueIndex = _.findIndex(refObjectValues, function (o) {
                return o === lastReferenceValue_1;
            });
            var SDValue = refObjectKeys[lastValueIndex];
            formattedSDValue = SDValue.replace('SD', '');
            if (formattedSDValue.includes('neg')) {
                formattedSDValue = formattedSDValue.substring(1, 0);
                formattedSDValue = '-' + formattedSDValue;
            }
            if (formattedSDValue === 'S' ||
                formattedSDValue === 'L' ||
                formattedSDValue === 'M' ||
                formattedSDValue === '-5') {
                formattedSDValue = '-4';
            }
        }
        return bmi && refSectionObject ? formattedSDValue : null;
    };
    JsExpressionHelper.prototype.calcWeightForHeightZscore = function (weightForHeightRef, height, weight) {
        var refSection;
        var formattedSDValue;
        if (height && weight) {
            height = parseFloat(height).toFixed(1);
        }
        var standardHeightMin = 45;
        var standardMaxHeight = 110;
        if (height < standardHeightMin || height > standardMaxHeight) {
            formattedSDValue = -4;
        }
        else {
            refSection = _.filter(weightForHeightRef, function (refObject) {
                return parseFloat(refObject['Length']).toFixed(1) === height;
            });
        }
        var refSectionObject = _.first(refSection);
        if (refSectionObject) {
            var refObjectValues = Object.keys(refSectionObject)
                .map(function (key) { return refSectionObject[key]; })
                .map(function (x) { return x; });
            var refObjectKeys = Object.keys(refSectionObject);
            var minimumValue = refObjectValues[1];
            var minReferencePoint_2 = [];
            if (weight < minimumValue) {
                minReferencePoint_2.push(minimumValue);
            }
            else {
                _.forEach(refObjectValues, function (value) {
                    if (value <= weight) {
                        minReferencePoint_2.push(value);
                    }
                });
            }
            var lastReferenceValue_2 = _.last(minReferencePoint_2);
            var lastValueIndex = _.findIndex(refObjectValues, function (o) {
                return o === lastReferenceValue_2;
            });
            var SDValue = refObjectKeys[lastValueIndex];
            formattedSDValue = SDValue.replace('SD', '');
            if (formattedSDValue.includes('neg')) {
                formattedSDValue = formattedSDValue.substring(1, 0);
                formattedSDValue = '-' + formattedSDValue;
            }
            if (formattedSDValue === 'S' ||
                formattedSDValue === 'L' ||
                formattedSDValue === 'M' ||
                formattedSDValue === '-5') {
                formattedSDValue = '-4';
            }
        }
        return height && weight ? formattedSDValue : null;
    };
    JsExpressionHelper.prototype.calcHeightForAgeZscore = function (heightForAgeRef, height, weight) {
        var refSectionObject = _.first(heightForAgeRef);
        var formattedSDValue;
        if (refSectionObject) {
            var refObjectValues = Object.keys(refSectionObject)
                .map(function (key) { return refSectionObject[key]; })
                .map(function (x) { return x; });
            var refObjectKeys = Object.keys(refSectionObject);
            var minimumValue = refObjectValues[1];
            var minReferencePoint_3 = [];
            if (height < minimumValue) {
                minReferencePoint_3.push(minimumValue);
            }
            else {
                _.forEach(refObjectValues, function (value) {
                    if (value <= height) {
                        minReferencePoint_3.push(value);
                    }
                });
            }
            var lastReferenceValue_3 = _.last(minReferencePoint_3);
            var lastValueIndex = _.findIndex(refObjectValues, function (o) {
                return o === lastReferenceValue_3;
            });
            var SDValue = refObjectKeys[lastValueIndex];
            formattedSDValue = SDValue.replace('SD', '');
            if (formattedSDValue.includes('neg')) {
                formattedSDValue = formattedSDValue.substring(1, 0);
                formattedSDValue = '-' + formattedSDValue;
            }
            if (formattedSDValue === 'S' ||
                formattedSDValue === 'L' ||
                formattedSDValue === 'M' ||
                formattedSDValue === '-5') {
                formattedSDValue = '-4';
            }
        }
        return height && weight && refSectionObject ? formattedSDValue : null;
    };
    JsExpressionHelper.prototype.isEmpty = function (val) {
        if (val === undefined ||
            val === null ||
            val === '' ||
            val === 'null' ||
            val === 'undefined') {
            return true;
        }
        if (Array.isArray(val) && val.length === 0) {
            return true;
        }
        return false;
    };
    JsExpressionHelper.prototype.arrayContains = function (array, members) {
        if (Array.isArray(members)) {
            if (members.length === 0) {
                return true;
            }
            var contains = true;
            for (var i = 0; i < members.length; i++) {
                var val = members[i];
                if (array.indexOf(val) === -1) {
                    contains = false;
                }
            }
            return contains;
        }
        else {
            return array.indexOf(members) !== -1;
        }
    };
    JsExpressionHelper.prototype.extractRepeatingGroupValues = function (key, array) {
        var values = array.map(function (item) {
            return item[key];
        });
        return values;
    };
    JsExpressionHelper.prototype.formatDate = function (value, format, offset) {
        format = format || 'yyyy-MM-dd';
        offset = offset || '+0300';
        if (!(value instanceof Date)) {
            value = new Date(value);
            if (value === null || value === undefined) {
                throw new Error('DateFormatException: value passed ' + 'is not a valid date');
            }
        }
        return value; // TODO implement this
        // return $filter('date')(value, format, offset);
    };
    JsExpressionHelper.prototype.arrayContainsAny = function (array, members) {
        if (Array.isArray(members)) {
            if (members.length === 0) {
                return true;
            }
            var contains = false;
            for (var i = 0; i < members.length; i++) {
                var val = members[i];
                if (array.indexOf(val) !== -1) {
                    contains = true;
                }
            }
            return contains;
        }
        else {
            return array.indexOf(members) !== -1;
        }
    };
    Object.defineProperty(JsExpressionHelper.prototype, "helperFunctions", {
        get: function () {
            var helper = this;
            return {
                arrayContainsAny: helper.arrayContainsAny,
                calcBMI: helper.calcBMI,
                calcBMIForAgeZscore: helper.calcBMIForAgeZscore,
                calcWeightForHeightZscore: helper.calcWeightForHeightZscore,
                calcHeightForAgeZscore: helper.calcHeightForAgeZscore,
                isEmpty: helper.isEmpty,
                arrayContains: helper.arrayContains,
                extractRepeatingGroupValues: helper.extractRepeatingGroupValues
            };
        },
        enumerable: true,
        configurable: true
    });
    return JsExpressionHelper;
}());
export { JsExpressionHelper };

//# sourceMappingURL=data:application/json;base64,
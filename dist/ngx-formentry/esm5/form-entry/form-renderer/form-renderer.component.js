import { Component, Input, Inject } from '@angular/core';
import 'hammerjs';
import { DEFAULT_STYLES } from './form-renderer.component.css';
import { DOCUMENT } from '@angular/common';
import { DataSources } from '../data-sources/data-sources';
import { NodeBase, GroupNode } from '../form-factory/form-node';
import { AfeFormGroup } from '../../abstract-controls-extension/afe-form-group';
import { ValidationFactory } from '../form-factory/validation.factory';
import { FormErrorsService } from '../services/form-errors.service';
// import { concat, of, Observable, Subject, BehaviorSubject } from 'rxjs';
// import * as _ from 'lodash';
// import { debounceTime, distinctUntilChanged, tap, switchMap, catchError, map } from 'rxjs/operators';
// import { QuestionBase } from '../question-models';
var FormRendererComponent = /** @class */ (function () {
    // items$: Observable<any[]>;
    // itemsLoading = false;
    // itemsInput$ = new Subject<string>();
    function FormRendererComponent(validationFactory, dataSources, formErrorsService, document) {
        this.validationFactory = validationFactory;
        this.dataSources = dataSources;
        this.formErrorsService = formErrorsService;
        this.document = document;
        this.childComponents = [];
        this.isCollapsed = false;
        this.activeTab = 0;
    }
    FormRendererComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.setUpRemoteSelect();
        this.setUpFileUpload();
        if (this.node && this.node.form) {
            var tab = this.node.form.valueProcessingInfo.lastFormTab;
            if (tab && tab !== this.activeTab) {
                this.activeTab = tab;
            }
        }
        if (this.node && this.node.question.renderingType === 'form') {
            this.formErrorsService.announceErrorField$.subscribe(function (error) {
                _this.scrollToControl(error);
            });
        }
        if (this.node && this.node.question.renderingType === 'section') {
            this.isCollapsed = !this.node.question.isExpanded;
        }
        if (this.parentComponent) {
            this.parentComponent.addChildComponent(this);
        }
    };
    FormRendererComponent.prototype.addChildComponent = function (child) {
        this.childComponents.push(child);
    };
    FormRendererComponent.prototype.setUpRemoteSelect = function () {
        if (this.node &&
            this.node.question.extras &&
            this.node.question.renderingType === 'remote-select') {
            // let selectQuestion = this.node.form.searchNodeByQuestionId(this.node.question.key)[0];
            this.dataSource = this.dataSources.dataSources[this.node.question.dataSource];
            /*
            let defaltValues = of([]);
            if (this.dataSource.resolveSelectedValue(selectQuestion.control.value)) {
              defaltValues = this.dataSource.resolveSelectedValue(selectQuestion.control.value).pipe(
                catchError(() => of([])), // empty list on error
              );
            }
            this.items$ = concat(
              defaltValues,
              this.itemsInput$.pipe(
                debounceTime(200),
                distinctUntilChanged(),
                tap(() => this.itemsLoading = true),
                switchMap(term => this.dataSource.searchOptions(term).pipe(
                  catchError(() => of([])), // empty list on error
                  tap(() => {
                    this.itemsLoading = false
                  })
                ))
              )
            );
            */
            if (this.dataSource && this.node.question.dataSourceOptions) {
                this.dataSource.dataSourceOptions = this.node.question.dataSourceOptions;
            }
        }
    };
    FormRendererComponent.prototype.setUpFileUpload = function () {
        if (this.node &&
            this.node.question.extras &&
            this.node.question.renderingType === 'file') {
            this.dataSource = this.dataSources.dataSources[this.node.question.dataSource];
            // console.log('Key', this.node.question);
            // console.log('Data source', this.dataSource);
        }
    };
    FormRendererComponent.prototype.checkSection = function (node) {
        if (node.question.renderingType === 'section') {
            var groupChildrenHidden_1 = false;
            var allSectionControlsHidden = Object.keys(node.children).every(function (k) {
                var innerNode = node.children[k];
                if (innerNode instanceof GroupNode) {
                    groupChildrenHidden_1 = Object.keys(innerNode.children).every(function (i) { return innerNode.children[i].control.hidden; });
                }
                return node.children[k].control.hidden || groupChildrenHidden_1;
            });
            return !allSectionControlsHidden;
        }
        return true;
    };
    FormRendererComponent.prototype.clickTab = function (tabNumber) {
        this.activeTab = tabNumber;
    };
    FormRendererComponent.prototype.loadPreviousTab = function () {
        if (!this.isCurrentTabFirst()) {
            this.clickTab(this.activeTab - 1);
            document.body.scrollTop = 0;
        }
    };
    FormRendererComponent.prototype.isCurrentTabFirst = function () {
        return this.activeTab === 0;
    };
    FormRendererComponent.prototype.isCurrentTabLast = function () {
        return this.activeTab === this.node.question['questions'].length - 1;
    };
    FormRendererComponent.prototype.loadNextTab = function () {
        if (!this.isCurrentTabLast()) {
            this.clickTab(this.activeTab + 1);
            document.body.scrollTop = 0;
        }
    };
    FormRendererComponent.prototype.tabSelected = function ($event) {
        this.activeTab = $event;
        this.setPreviousTab();
    };
    FormRendererComponent.prototype.setPreviousTab = function () {
        if (this.node && this.node.form) {
            this.node.form.valueProcessingInfo['lastFormTab'] = this.activeTab;
        }
    };
    FormRendererComponent.prototype.hasErrors = function () {
        return this.node.control.touched && !this.node.control.valid;
    };
    FormRendererComponent.prototype.errors = function () {
        return this.getErrors(this.node);
    };
    FormRendererComponent.prototype.scrollToControl = function (error) {
        var _this = this;
        var tab = +error.split(',')[0];
        var elSelector = error.split(',')[1] + 'id';
        // the tab components
        var tabComponent = this.childComponents[tab];
        this.clickTab(tab);
        setTimeout(function () {
            // expand all sections
            tabComponent.childComponents.forEach(function (section) {
                section.isCollapsed = false;
                setTimeout(function () {
                    var element = _this.document.getElementById(elSelector);
                    if (element !== null && element.focus) {
                        element.focus();
                        element.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }, 100);
            });
        }, 200);
    };
    FormRendererComponent.prototype.onDateChanged = function (node) {
        // console.log('Node', node);
        this.node = node;
    };
    FormRendererComponent.prototype.upload = function (event) {
        // console.log('Event', event);
        // console.log('Data', this.dataSource);
    };
    FormRendererComponent.prototype.toggleInformation = function (infoId) {
        var e = document.getElementById(infoId);
        if (e.style.display === 'block') {
            e.style.display = 'none';
        }
        else {
            e.style.display = 'block';
        }
        console.log('InfoId', infoId);
    };
    FormRendererComponent.prototype.getErrors = function (node) {
        var errors = node.control.errors;
        if (errors) {
            return this.validationFactory.errors(errors, node.question);
        }
        return [];
    };
    FormRendererComponent.decorators = [
        { type: Component, args: [{
                    selector: 'form-renderer',
                    template: "<!--CONTAINERS-->\n<div *ngIf=\"node.question.renderingType === 'form'\">\n  <div class=\"dropdown dropdown-tabs forms-dropdown\">\n    <a class=\"btn dropdown-toggle\" data-toggle=\"dropdown\">\n      <i class=\"fa fa-angle-double-down\"></i>\n    </a>\n    <ul\n      class=\"dropdown-menu dropdown-menu-right forms-dropdown-menu\"\n      role=\"menu\"\n      aria-labelledby=\"dropdownMenu\"\n    >\n      <li\n        *ngFor=\"let question of node.question.questions; let i = index\"\n        (click)=\"clickTab(i)\"\n      >\n        {{ question.label }}\n      </li>\n    </ul>\n  </div>\n  <mat-tab-group\n    (selectedIndexChange)=\"tabSelected($event)\"\n    [selectedIndex]=\"activeTab\"\n  >\n    <mat-tab\n      [label]=\"question.label\"\n      *ngFor=\"let question of node.question.questions; let i = index\"\n    >\n      <div (swipeLeft)=\"loadNextTab()\" (swipeRight)=\"loadPreviousTab()\">\n        <form-renderer\n          [node]=\"node.children[question.key]\"\n          [parentComponent]=\"this\"\n          [parentGroup]=\"node.control\"\n        ></form-renderer>\n      </div>\n    </mat-tab>\n  </mat-tab-group>\n\n  <div style=\"text-align: center\">\n    <button\n      type=\"button\"\n      class=\"btn btn-default\"\n      (click)=\"loadPreviousTab()\"\n      [ngClass]=\"{ disabled: isCurrentTabFirst() }\"\n    >\n      &lt;&lt;\n    </button>\n    <button\n      type=\"button\"\n      class=\"btn btn-default\"\n      (click)=\"loadNextTab()\"\n      [ngClass]=\"{ disabled: isCurrentTabLast() }\"\n    >\n      &gt;&gt;\n    </button>\n  </div>\n</div>\n<div *ngIf=\"node.question.renderingType === 'page'\">\n  <!--<h2>{{node.question.label}}</h2>-->\n  <form-renderer\n    *ngFor=\"let question of node.question.questions\"\n    [parentComponent]=\"this\"\n    [node]=\"node.children[question.key]\"\n    [parentGroup]=\"parentGroup\"\n  ></form-renderer>\n</div>\n<div *ngIf=\"node.question.renderingType === 'section' && checkSection(node)\">\n  <div class=\"panel panel-primary\">\n    <div class=\"panel-heading\">\n      <button\n        type=\"button\"\n        class=\"btn btn-primary pull-right\"\n        (click)=\"isCollapsed = !isCollapsed\"\n      >\n        {{ isCollapsed ? 'Show' : 'Hide' }}\n      </button>\n      {{ node.question.label }}\n    </div>\n    <div class=\"panel-body\" [collapse]=\"isCollapsed\">\n      <form-renderer\n        *ngFor=\"let question of node.question.questions\"\n        [parentComponent]=\"this\"\n        [node]=\"node.children[question.key]\"\n        [parentGroup]=\"parentGroup\"\n      ></form-renderer>\n    </div>\n  </div>\n</div>\n\n<!-- MESSAGES -->\n<div\n  *ngIf=\"node.control && node.control.alert && node.control.alert !== ''\"\n  class=\"alert alert-warning\"\n>\n  <a class=\"close\" data-dismiss=\"alert\">&times;</a> {{ node.control.alert }}\n</div>\n\n<!--CONTROLS-->\n\n<div\n  *ngIf=\"node.question.controlType === 0\"\n  class=\"form-group\"\n  [formGroup]=\"parentGroup\"\n  [hidden]=\"node.control.hidden\"\n  [ngClass]=\"{ disabled: node.control.disabled }\"\n>\n  <!--LEAF CONTROL-->\n  <div class=\"question-area\">\n    <a\n      class=\"form-tooltip pull-right\"\n      (click)=\"toggleInformation(node.question.extras.id)\"\n      data-placement=\"right\"\n      *ngIf=\"\n        node.question &&\n        node.question.extras.questionInfo &&\n        node.question.extras.questionInfo !== '' &&\n        node.question.extras.questionInfo !== ' '\n      \"\n    >\n      <i class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></i>\n    </a>\n\n    <label\n      *ngIf=\"node.question.label\"\n      [style.color]=\"hasErrors() ? 'red' : ''\"\n      class=\"control-label\"\n      [attr.for]=\"node.question.key\"\n    >\n      {{ node.question.required ? '*' : '' }} {{ node.question.label }}\n    </label>\n    <div [ngSwitch]=\"node.question.renderingType\">\n      <select\n        class=\"form-control\"\n        *ngSwitchCase=\"'select'\"\n        [formControlName]=\"node.question.key\"\n        [id]=\"node.question.key + 'id'\"\n      >\n        <option *ngFor=\"let o of node.question.options\" [ngValue]=\"o.value\">\n          {{ o.label }}\n        </option>\n      </select>\n\n      <app-file-upload\n        *ngSwitchCase=\"'file'\"\n        [dataSource]=\"dataSource\"\n        [formControlName]=\"node.question.key\"\n        [id]=\"node.question.key + 'id'\"\n        (fileChanged)=\"upload($event)\"\n      >\n      </app-file-upload>\n      <textarea\n        [placeholder]=\"node.question.placeholder\"\n        [rows]=\"node.question.rows\"\n        class=\"form-control\"\n        *ngSwitchCase=\"'textarea'\"\n        [formControlName]=\"node.question.key\"\n        [id]=\"node.question.key + 'id'\"\n      >\n      </textarea>\n      <!--\n      <ng-select *ngSwitchCase=\"'remote-select'\" [items]=\"items$ | async\" bindLabel=\"label\" bindValue=\"value\" placeholder=\"{{node.question.placeholder}}\"\n        [hideSelected]=\"true\" [loading]=\"itemsLoading\"  [typeahead]=\"itemsInput$\" [formControlName]=\"node.question.key\" [id]=\"node.question.key + 'id'\">\n      </ng-select>\n    -->\n      <remote-select\n        *ngSwitchCase=\"'remote-select'\"\n        [placeholder]=\"node.question.placeholder\"\n        tabindex=\"0\"\n        [dataSource]=\"dataSource\"\n        [componentID]=\"node.question.key + 'id'\"\n        [formControlName]=\"node.question.key\"\n        [id]=\"node.question.key + 'id'\"\n      ></remote-select>\n      <!--  \n      <date-time-picker *ngSwitchCase=\"'date'\" [showTime]=\"node.question.showTime\" tabindex=\"0\" [weeks]='node.question.extras.questionOptions.weeksList'\n        (onDateChange)=\"onDateChanged(node)\" [showWeeks]=\"node.question.showWeeksAdder\" [formControlName]=\"node.question.key\"\n        [id]=\"node.question.key + 'id'\"></date-time-picker>\n  -->\n\n      <ngx-date-time-picker\n        *ngSwitchCase=\"'date'\"\n        [showTime]=\"node.question.showTime\"\n        [id]=\"node.question.key + 'id'\"\n        [formControlName]=\"node.question.key\"\n        [weeks]=\"node.question.extras.questionOptions.weeksList\"\n        (onDateChange)=\"onDateChanged(node)\"\n        [showWeeks]=\"node.question.showWeeksAdder\"\n      ></ngx-date-time-picker>\n      <ngx-time-picker  \n      *ngSwitchCase=\"'time'\"  \n      id=\"node.question.key + 'id'\"  \n      [formControlName]=\"node.question.key\"\n      ></ngx-time-picker>\n      <ng-select\n        *ngSwitchCase=\"'multi-select'\"\n        [style.height]=\"'auto'\"\n        [style.overflow-x]=\"'hidden'\"\n        tabindex=\"0\"\n        [formControlName]=\"node.question.key\"\n        [id]=\"node.question.key + 'id'\"\n        [options]=\"node.question.options\"\n        [multiple]=\"true\"\n      >\n      </ng-select>\n      <ng-select\n        *ngSwitchCase=\"'single-select'\"\n        [style.height]=\"auto\"\n        tabindex=\"0\"\n        [formControlName]=\"node.question.key\"\n        [id]=\"node.question.key + 'id'\"\n        [options]=\"node.question.options\"\n        [multiple]=\"false\"\n      >\n      </ng-select>\n      <input\n        class=\"form-control\"\n        *ngSwitchCase=\"'number'\"\n        [formControlName]=\"node.question.key\"\n        [attr.placeholder]=\"node.question.placeholder\"\n        [type]=\"'number'\"\n        [id]=\"node.question.key + 'id'\"\n        [step]=\"'any'\"\n        [min]=\"node.question.extras.questionOptions.min\"\n        [max]=\"node.question.extras.questionOptions.max\"\n      />\n      <input\n        class=\"form-control\"\n        *ngSwitchCase=\"'decimal'\"\n        [formControlName]=\"node.question.key\"\n        [attr.placeholder]=\"node.question.placeholder\"\n        [type]=\"'text'\"\n        [id]=\"node.question.key + 'id'\"\n        [min]=\"node.question.extras.questionOptions.min\"\n        [max]=\"node.question.extras.questionOptions.max\"\n      />\n      <input\n        class=\"form-control\"\n        *ngSwitchDefault\n        [formControlName]=\"node.question.key\"\n        [attr.placeholder]=\"node.question.placeholder\"\n        [type]=\"node.question.renderingType\"\n        [id]=\"node.question.key + 'id'\"\n      />\n\n      <div *ngSwitchCase=\"'radio'\">\n        <div *ngFor=\"let o of node.question.options\">\n          <label class=\"form-control no-border\">\n            <input\n              type=\"radio\"\n              [formControlName]=\"node.question.key\"\n              [id]=\"node.question.key + 'id'\"\n              [value]=\"o.value\"\n            />\n            {{ o.label }}\n          </label>\n        </div>\n      </div>\n\n      <div *ngSwitchCase=\"'checkbox'\">\n        <checkbox\n          [id]=\"node.question.key + 'id'\"\n          [formControlName]=\"node.question.key\"\n          [options]=\"node.question.options\"\n          [selected]=\"node.control.value\"\n        ></checkbox>\n      </div>\n\n      <div\n        *ngIf=\"\n          node.question.enableHistoricalValue && node.question.historicalDisplay\n        \"\n        style=\"margin-top: 2px\"\n      >\n        <div class=\"container-fluid\">\n          <div class=\"row\">\n            <div class=\"col-xs-9\">\n              <span class=\"text-warning\">Previous Value: </span>\n              <strong>{{ node.question.historicalDisplay?.text }}</strong>\n              <span *ngIf=\"node.question.showHistoricalValueDate\">\n                <span> | </span>\n                <strong class=\"text-primary\"\n                  >{{ node.question.historicalDisplay?._date }}\n                </strong>\n                <span\n                  class=\"text-primary\"\n                  *ngIf=\"\n                    node.question.historicalDisplay &&\n                    node.question.historicalDisplay._date\n                  \"\n                >\n                  ({{ node.question.historicalDisplay._date | timeAgo }})</span\n                >\n              </span>\n            </div>\n            <button\n              type=\"button\"\n              [node]=\"node\"\n              [name]=\"'historyValue'\"\n              class=\"btn btn-primary btn-small col-xs-3\"\n            >\n              Use Value\n            </button>\n          </div>\n        </div>\n      </div>\n      <appointments-overview [node]=\"node\"></appointments-overview>\n      <div *ngIf=\"hasErrors()\">\n        <p *ngFor=\"let e of errors()\">\n          <span class=\"text-danger\">{{ e }}</span>\n        </p>\n      </div>\n    </div>\n\n    <div\n      class=\"question-info col-md-12 col-lg-12 col-sm-12\"\n      id=\"{{ node.question.extras.id }}\"\n      *ngIf=\"\n        node.question &&\n        node.question.extras.questionInfo &&\n        node.question.extras.questionInfo !== '' &&\n        node.question.extras.questionInfo !== ' '\n      \"\n    >\n      {{ node.question.extras.questionInfo }}\n    </div>\n  </div>\n</div>\n<div\n  *ngIf=\"node.question.controlType === 1\"\n  [hidden]=\"node.control.hidden\"\n  [ngClass]=\"{ disabled: node.control.disabled }\"\n>\n  <!--ARRAY CONTROL-->\n  <div [ngSwitch]=\"node.question.renderingType\">\n    <div class=\"well\" style=\"padding: 2px\" *ngSwitchCase=\"'repeating'\">\n      <h4 style=\"margin: 2px; font-weight: bold\">{{ node.question.label }}</h4>\n      <hr\n        style=\"\n          margin-left: -2px;\n          margin-right: -2px;\n          margin-bottom: 4px;\n          margin-top: 8px;\n          border-width: 2px;\n        \"\n      />\n      <div [ngSwitch]=\"node.question.extras.type\">\n        <div *ngSwitchCase=\"'testOrder'\">\n          <div *ngFor=\"let child of node.children; let i = index\">\n            <form-renderer\n              *ngFor=\"let question of child.question.questions\"\n              [parentComponent]=\"this\"\n              [node]=\"child.children[question.key]\"\n              [parentGroup]=\"child.control\"\n            ></form-renderer>\n            <div>{{ child.orderNumber }}</div>\n            <button\n              type=\"button \"\n              class=\"btn btn-sm btn-danger\"\n              (click)=\"node.removeAt(i)\"\n            >\n              Remove\n            </button>\n            <br />\n            <hr\n              style=\"\n                margin-left: -2px;\n                margin-right: -2px;\n                margin-bottom: 4px;\n                margin-top: 8px;\n                border-width: 1px;\n              \"\n            />\n          </div>\n        </div>\n\n        <div *ngSwitchCase=\"'obsGroup'\" style=\"margin-bottom: 20px\">\n          <div *ngFor=\"let child of node.children; let i = index\">\n            <form-renderer\n              *ngFor=\"let question of child.question.questions\"\n              [parentComponent]=\"this\"\n              [node]=\"child.children[question.key]\"\n              [parentGroup]=\"child.control\"\n            ></form-renderer>\n            <button\n              type=\"button \"\n              class=\"btn btn-sm btn-danger\"\n              (click)=\"node.removeAt(i)\"\n            >\n              Remove\n            </button>\n            <br />\n            <hr\n              style=\"\n                margin-left: -2px;\n                margin-right: -2px;\n                margin-bottom: 4px;\n                margin-top: 8px;\n                border-width: 1px;\n              \"\n            />\n          </div>\n        </div>\n      </div>\n      <button\n        type=\"button \"\n        class=\"btn btn-primary\"\n        (click)=\"node.createChildNode()\"\n      >\n        Add\n      </button>\n    </div>\n  </div>\n</div>\n<div\n  *ngIf=\"node.question.controlType === 2\"\n  [hidden]=\"node.control.hidden\"\n  [ngClass]=\"{ disabled: node.control.disabled }\"\n>\n  <!--GROUP-->\n  <div [ngSwitch]=\"node.question.renderingType\">\n    <div *ngSwitchCase=\"'group'\">\n      <form-renderer\n        *ngFor=\"let question of node.question.questions\"\n        [parentComponent]=\"this\"\n        [node]=\"node.children[question.key]\"\n        [parentGroup]=\"node.control\"\n      ></form-renderer>\n    </div>\n    <div\n      *ngSwitchCase=\"'field-set'\"\n      style=\"border: 1px solid #eeeeee; padding: 2px; margin: 2px\"\n    >\n      <form-renderer\n        *ngFor=\"let question of node.question.questions\"\n        [parentComponent]=\"this\"\n        [node]=\"node.children[question.key]\"\n        [parentGroup]=\"node.control\"\n      ></form-renderer>\n    </div>\n  </div>\n</div>\n",
                    styles: ['../../style/app.css', DEFAULT_STYLES]
                },] },
    ];
    FormRendererComponent.ctorParameters = function () { return [
        { type: ValidationFactory },
        { type: DataSources },
        { type: FormErrorsService },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    FormRendererComponent.propDecorators = {
        parentComponent: [{ type: Input }],
        node: [{ type: Input }],
        parentGroup: [{ type: Input }]
    };
    return FormRendererComponent;
}());
export { FormRendererComponent };
//# sourceMappingURL=data:application/json;base64,